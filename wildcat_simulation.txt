 initialize() {
	initializeMutationRate(1e-7); //1e-7
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 11999);
	initializeRecombinationRate(0.5);
	defineConstant("ancvar", Ancvar); // ancestral baseline variation
	defineConstant("f1", F1); // F pop1 (domestic)
	defineConstant("f2", F2); //  F pop2 (wildcat)
	defineConstant("pop1", Pop1); // size of pop1 (domestics)
	defineConstant("pop2", Pop2); // size of pop2 (wild)
	defineConstant("pop3", Pop3); // size of pop3 (captive)
	defineConstant("hyb_time", Hyb_time); // time at which introgression begins in wild-living population (T1)
	defineConstant("cap_time", Cap_time); // time at which captive population is established (T2)
	defineConstant("mig1", Mig1); // migration rate pop1 -> pop2
	defineConstant("mig2", Mig2); //migration rate pop2 -> pop3

}

1 { 
	sim.addSubpop("p1", pop1);
	sim.addSubpop("p2", pop2);
}

1 {
	g = sim.subpopulations.genomes;
	n1 = size(sim.subpopulations[0].genomes); //this is the total number of individuals X 2 (if haploids)
	n2 = size(sim.subpopulations[1].genomes); //this is the total number of individuals X 2 (if haploids)
	print(n1 + n2);
	// slim doesn't have a beta distribution, so make it from two gammas
	a = rgamma(12000,1,1);
	b = rgamma(12000,ancvar,ancvar);
	betarnv = a/(a+b);
	
	for (i in 0:11999){
		if (betarnv[i] < 1.e-7){
			betarnv[i]=1.e-7;
			}
		if ((1-betarnv[i]) < 1.e-7){
			betarnv[i]=(1-1.e-7);
			}
		}

	// This gives us the gene frequency for some imaginary baseline from which the two 
	// progenitor populations started (i.e. ancestor to the domestics and the wildcats)
	// we now model drift in the two descendent populations. We can do this as:

	a2 = rgamma(12000,betarnv*(1-f1)/f1,betarnv*(1-f1)/f1);
	b2 = rgamma(12000,(1.0-betarnv)*(1-f1)/f1,(1.0-betarnv)*(1-f1)/f1);
	betarnv2 = a2/(a2 + b2);
	a3 = rgamma(12000,betarnv*(1-f2)/f2,betarnv*(1-f2)/f2);
	b3 = rgamma(12000,(1.0-betarnv)*(1-f2)/f2,(1.0-betarnv)*(1-f2)/f2);
	betarnv3 = a3/(a3 + b3);

	//here, F1, F2 is the scaled variance in gene frequency compared to the baseline for pops 1 and 2. Very roughly
	//F1+F2 is the pairwise Fst (works when F1,F2 small)

	for(j in 0:11999)
	{
		//generate n1 + n2 Bernoulli 0/1 random variables with prob betarnv[j]; make T/F
		hit1 = asLogical(rbinom(n1,1,betarnv2[j])); 
		hit2 = asLogical(rbinom(n2,1,betarnv3[j])); 
		hit = c(hit1,hit2);
		g[hit].addNewMutation(m1,0.0,j);
	}
	
}

// terminate simulations with excess numbers of SNPs
1 {
	snps1=sim.countOfMutationsOfType(m1);
	if (snps1 > 11500) { 
		p1Individuals = sim.subpopulations[0].individuals;
		sampledIndividuals1=sample(p1Individuals,1);
		sampledIndividuals1.genomes.outputVCF();
		sim.simulationFinished(); }
}	

// set migration rates from domestic cats (p1) into wild-living population (p2)
// migration occurs at every generation from hyb_time to end
1: {
	if (sim.generation >= hyb_time){
		p2.setMigrationRates(p1, mig1);
	}
}

// captive population is established (random sample from wild population)
1: {
	if (sim.generation == cap_time){
		sim.addSubpopSplit("p3", pop3, p2);
	}
}

// set migration rates from wild to captive population
1: {
	if(sim.generation >= cap_time){
		if (sim.generation % 3 == 0){
			p3.setMigrationRates(p2, mig2);	
		}
		else
		{
			p3.setMigrationRates(p2, 0);
		}
	}
}

// run for 500 generations
500 late() {
	p1Individuals = sim.subpopulations[0].individuals;
	p2Individuals = sim.subpopulations[1].individuals;
	p3Individuals = sim.subpopulations[2].individuals;	
	sampledIndividuals1 = sample(p1Individuals,4); //domestic
	sampledIndividuals2 = sample(p2Individuals,45); //wild-living
	sampledIndividuals3 = sample(p3Individuals,46); //captive wildcats
	allIndividuals = c(sampledIndividuals1,sampledIndividuals2,sampledIndividuals3);
	allIndividuals.genomes.outputVCF();
	sim.simulationFinished();
}
